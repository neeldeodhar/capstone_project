import pandas as pd
import numpy as np
from numpy import ndarray

from sklearn.model_selection import train_test_split 
from sklearn.ensemble import RandomForestClassifier
from sklearn.tree import DecisionTreeClassifier
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import accuracy_score
from sklearn.linear_model import LogisticRegression
from sklearn.neural_network import MLPClassifier
from sklearn.svm import SVC
from sklearn.neighbors import KNeighborsClassifier
from capstone_project import analyzer
from sklearn.preprocessing import LabelEncoder
from sklearn.preprocessing import OrdinalEncoder
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.metrics import confusion_matrix, ConfusionMatrixDisplay
 

def main():
    absolute_path = "C:/Users/ideod/OneDrive/Documents/new folder zip data/diamonds.csv"
    dfdf = analyzer.read_dataset(csv_file_path=absolute_path)
    data_manipulation = analyzer.DataManipulation(dfdf)

    y = dfdf['cut']    
    selected_features = dfdf[['carat', 'depth', 'table', 'price' ]]
    
    encoder = LabelEncoder()
    Y = encoder.fit_transform(y)
    
    
    scaler = StandardScaler()
    X = scaler.fit_transform(selected_features)
    X_train, X_test_val, Y_train, Y_test_val = train_test_split(X, Y, test_size=0.2, random_state=45)
    X_test, X_val, Y_test, Y_val = train_test_split(X_test_val, Y_test_val, test_size=0.5, random_state=45)
  
    
    X_trainscale = scaler.fit_transform(X_train)
    X_testscale = scaler.transform(X_test)
    
    score_dict = {}
    LRC = MyLogisticRegression(random_state= 0, params={})
    LRC.fit(X_train, Y_train , None)
    score_dict ["Logistic Regression"] = LRC.score(X_test, Y_test)
    
    print(score_dict)
    
 
    score_DTC = {}
  
    DTC = MyDecisionTree(random_state= 0, criterion= 'gini', max_depth = None, params = {})
    DTC.fit(X_train, Y_train , None)
    score_DTC["Decision Tree"] = DTC.score(X_test, Y_test)
    
    print(score_DTC)

    score_SVC = {}

    SV = MySVC_classifier(kernel = None, gamma = None, random_state= 0, max_depth = None, params = {})
    SV.fit(X_train, Y_train , None)
    score_SVC["SVC"] = SV.score(X_test, Y_test)
    
    print(score_SVC)
 
    Y_pred = SV.predict(X_test)
    con = confusion_matrix(Y_test, Y_pred)
    print ("confusion matrix:\n",con)
 
    cmval_display = ConfusionMatrixDisplay(con).plot()
   
       
    plt.show()

    score_RF = {}
   
    RF = MyRandom_Classifier(random_state= None, n_estimators= None, criterion = None, max_depth = None, params = {})
    RF.fit(X_train, Y_train , None)
    score_RF["Random Forest "] = RF.score(X_test, Y_test)
    
    print(score_RF)
    score_KN = {}
    KN = MyKNN_Classifier(random_state= None, params = {})
    KN.fit(X_train, Y_train , None)
    score_KN["KNN Classifier "] = KN.score(X_test, Y_test)
    
    print(score_KN)

    score_ANN = {}
  
    AN = MyANN_classifier(random_state= None, max_iter = 40, hidden_layer_sizes = None, params = {})
    AN.fit(X_train, Y_train , None)
    score_ANN["ANN Classifier "] = AN.score(X_test, Y_test)
    
    print(score_ANN)


def score(y_true: np.ndarray, y_predicted: np.ndarray) -> float:
    score = accuracy_score(y_true, y_predicted)
    return score

#PLOTTING CONFUSION MATRIX
class Plot_confusion_matrix():
    def __init__(self, df:pd.DataFrame):
        self.df = df
    
    def plot_correlationMatrix(self, column_names):
       selected_features = self.df[column_names]
      
       plt.figure(figsize =(7,7))
       sns.heatmap(selected_features.corr(), annot = True)
       
       plt.show()
class Classifier: 
    def __init__(self, random_state: int, params: dict):
        
       self.random_state = random_state
       self.model = self.create_model()
       self.params = params
    def create_model():
        return None

    def fit(self, X_train: np.ndarray, y_true_train: np.ndarray, params: dict):
       
        self.model.fit(X_train, y_true_train)
    def predict(self, X: np.ndarray) -> np.ndarray:
        predict_results = self.model.predict(X)
        return predict_results
    def split_data(self):
        self.X_train = self.X_test, self.Y_train, self.Y_test = train_test_split(X, Y, test_size = self.custom_param, random_state =42)
    def score(self, X:np.ndarray, y_true: ndarray) ->float:
        y_predicted = self.predict(X)
        score = accuracy_score(y_true, y_predicted)
        return score

              
       
    
class MyLogisticRegression(Classifier):
    def __init__(self, random_state: int, params: dict):
        super().__init__(random_state = random_state, params = params)
    def create_model(self)-> LogisticRegression:
        model = LogisticRegression()
        return model

class MyKNN_Classifier(Classifier):
    def __init__(self, random_state: int, params: dict):
        super().__init__(random_state = random_state, params = params)
    def create_model(self)-> KNeighborsClassifier:
        modelKN = KNeighborsClassifier()
        return modelKN   

class MyRandom_Classifier(Classifier):
    def __init__(self, n_estimators: int, random_state: int,criterion: str, max_depth: int, params: dict):
       
        super().__init__(random_state= random_state , params = params)
       
        self.criterion = criterion
        self.n_estimators = n_estimators
        self.max_depth = max_depth
        self.random_state = random_state
   
    def create_model(self)-> RandomForestClassifier:
        model = RandomForestClassifier()
        return model
class MyDecisionTree(Classifier):
    def __init__(self, criterion:str, random_state:int, max_depth: int, params: dict):
       
       super().__init__(random_state = random_state, params = params)
    def create_model(self)-> DecisionTreeClassifier:
        model = DecisionTreeClassifier()
       
        return model   
class MySVC_classifier(Classifier):        
    def __init__(self, kernel:str, gamma: str, random_state:int, max_depth: int, params: dict):
        
        
        self.gamma = gamma
        self.kernel = kernel 
        super().__init__(random_state = random_state, params = params)
    def create_model(self)-> SVC:
        model = SVC()
       
        return model

class MyANN_classifier(Classifier):
    def __init__(self, max_iter: int, random_state: int, hidden_layer_sizes: int, params:dict):
        self.max_iter = max_iter
        self.hidden_layer_sizes = hidden_layer_sizes
        super().__init__(random_state = random_state, params = params)
    def create_model(self)-> MLPClassifier:
        model = MLPClassifier()
        return model
    
    
  

if __name__ =="__main__":
   main()
   
  